var DumpStream, Writable,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Writable = require('stream').Writable;

module.exports = DumpStream = (function(superClass) {
  extend(DumpStream, superClass);

  function DumpStream(opts) {
    var cbError;
    if (opts == null) {
      opts = {};
    }
    if (!opts) {
      opts = {};
    }
    if (!this instanceof DumpStream) {
      return new DumpStream(opts);
    } else {
      Writable.call(this, opts);
    }
    this.src = null;
    cbError = (function(_this) {
      return function(err) {
        return _this.emit('error', err);
      };
    })(this);
    this.on('pipe', (function(_this) {
      return function(src) {
        src.on('error', cbError);
        return _this.src = src;
      };
    })(this));
    this.on('unpipe', (function(_this) {
      return function(src) {
        src.removeListener('error', cbError);
        return _this.src = null;
      };
    })(this));
    this.string = "";
  }

  DumpStream.prototype._write = function(chunk, enc, cb) {
    this.string += chunk.toString();
    return typeof cb === "function" ? cb() : void 0;
  };

  DumpStream.prototype.dump = function() {
    return this.string;
  };

  return DumpStream;

})(Writable);
